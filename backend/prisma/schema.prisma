// backend/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Reads from .env
}

model User {
  userId        Int       @id @default(autoincrement()) @map("user_id")
  name          String
  email         String    @unique
  passwordHash  String    @map("password_hash")
  role          String    @default("PLAYER") // Assuming PLAYER/ADMIN roles
  createdAt     DateTime  @default(now()) @map("created_at")
  rounds        Round[]   @relation("CreatedBy") // Relation for created_by FK
  predictions   Prediction[]

  @@map("users") // Map model to lowercase 'users' table
}

model Round {
  roundId       Int       @id @default(autoincrement()) @map("round_id")
  name          String
  deadline      DateTime
  status        String    // 'SETUP', 'OPEN', 'CLOSED', 'COMPLETED'
  createdByUserId Int     @map("created_by")
  createdAt     DateTime  @default(now()) @map("created_at")
  fixtures      Fixture[]
  predictions   Prediction[]
  creator       User      @relation("CreatedBy", fields: [createdByUserId], references: [userId])

  @@map("rounds") // Map model to lowercase 'rounds' table
}

model Fixture {
  fixtureId      Int       @id @default(autoincrement()) @map("fixture_id")
  roundId        Int       @map("round_id")
  homeTeam       String    @map("home_team")
  awayTeam       String    @map("away_team")
  matchTime      DateTime  @map("match_time")
  homeScore      Int?      @map("home_score") // Nullable scores
  awayScore      Int?      @map("away_score") // Nullable scores
  createdAt      DateTime  @default(now()) @map("created_at")
  round          Round     @relation(fields: [roundId], references: [roundId])
  predictions    Prediction[]

  @@map("fixtures") // Map model to lowercase 'fixtures' table
}

model Prediction {
  predictionId        Int     @id @default(autoincrement()) @map("prediction_id")
  userId              Int     @map("user_id")
  fixtureId           Int     @map("fixture_id")
  roundId             Int     @map("round_id")
  predictedHomeGoals  Int     @map("predicted_home_goals")
  predictedAwayGoals  Int     @map("predicted_away_goals")
  pointsAwarded       Int?    @map("points_awarded") // Nullable points
  isJoker             Boolean @default(false) @map("is_joker")
  submittedAt         DateTime @default(now()) @map("submitted_at") // Or use @updatedAt
  user                User    @relation(fields: [userId], references: [userId])
  fixture             Fixture @relation(fields: [fixtureId], references: [fixtureId])
  round               Round   @relation(fields: [roundId], references: [roundId])


  @@unique([userId, fixtureId], map: "predictions_user_id_fixture_id_key") // Explicit map for constraint name
  @@map("predictions") // Map model to lowercase 'predictions' table
}