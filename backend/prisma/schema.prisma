// backend/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Reads from .env
}

model User {
  userId        Int       @id @default(autoincrement()) @map("user_id")
  name          String
  email         String    @unique
  passwordHash  String    @map("password_hash")
  role          String    @default("PLAYER")
  teamName      String?   @map("team_name")
  avatarUrl     String?   @map("avatar_url") // Future placeholder
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at") // <<< MODIFIED: Added @default(now())
  // --- ADD Verification & Subscription Fields ---
  emailVerified          Boolean  @default(false) @map("email_verified")
  emailVerificationToken String?  @unique @map("email_verification_token") // Token sent via email
  subscriptionTier       String   @default("FREE") @map("subscription_tier") // e.g., "FREE", "PREMIUM"
  // subscriptionExpiresAt DateTime? @map("subscription_expires_at") // Optional for later
  // --- END Added Fields ---
  rounds        Round[]   @relation("CreatedBy")
  predictions   Prediction[]
  postedNews    NewsItem[]   @relation("PostedNews")
  passwordResetToken       String?   @unique @map("password_reset_token")
  passwordResetExpires     DateTime? @map("password_reset_expires")
  sentFriendships     Friendship[] @relation("SentFriendships") // Requests this user sent
  receivedFriendships Friendship[] @relation("ReceivedFriendships") // Requests this user received
  createdLeagues    League[]           @relation("LeagueCreator")
  leagueMemberships LeagueMembership[] @relation("LeagueMember")

  @@map("users")
}

model Round {
  roundId       Int       @id @default(autoincrement()) @map("round_id")
  name          String
  deadline      DateTime
  status        String
  jokerLimit    Int       @default(1) @map("joker_limit")
  createdByUserId Int     @map("created_by")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at") // <<< MODIFIED: Added @default(now())
  fixtures      Fixture[]
  predictions   Prediction[]
  creator       User      @relation("CreatedBy", fields: [createdByUserId], references: [userId])

  @@map("rounds")
}

model Fixture {
  fixtureId      Int       @id @default(autoincrement()) @map("fixture_id")
  roundId        Int       @map("round_id")
  externalId     Int?      @map("external_id")
  homeTeam       String    @map("home_team")
  awayTeam       String    @map("away_team")
  matchTime      DateTime  @map("match_time")
  homeScore      Int?      @map("home_score")
  awayScore      Int?      @map("away_score")
  status         String?   @default("SCHEDULED") @map("status") // Status added previously
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @default(now()) @updatedAt @map("updated_at") // <<< MODIFIED: Added @default(now())
  round          Round     @relation(fields: [roundId], references: [roundId])
  predictions    Prediction[]

  // Unique constraint added previously
  @@unique([roundId, homeTeam, awayTeam, matchTime], map: "fixtures_round_teams_time_key")
  // Optional: Add unique constraint for externalId within a round later if needed
  // @@unique([roundId, externalId])
  @@map("fixtures")
}

model League {
  leagueId      Int      @id @default(autoincrement()) @map("league_id")
  name          String
  description   String?  @db.Text
  creatorUserId Int      @map("creator_user_id")
  inviteCode    String?  @unique @map("invite_code") // Keep invite code
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  creator       User               @relation("LeagueCreator", fields: [creatorUserId], references: [userId], onDelete: Cascade)
  memberships   LeagueMembership[] @relation("LeagueMembers")

  @@map("leagues")
}

model LeagueMembership {
  membershipId Int      @id @default(autoincrement()) @map("membership_id")
  leagueId     Int      @map("league_id")
  userId       Int      @map("user_id")
  role         String   // 'ADMIN' (creator) or 'MEMBER'
  joinedAt     DateTime? @map("joined_at") // <<< MADE OPTIONAL (nullable)
  status       String    @map("status") // Status: ACCEPTED, INVITED -- REMOVED DEFAULT
  invitedAt    DateTime? @map("invited_at") // Timestamp when invite was sent


  // Relations
  league        League   @relation("LeagueMembers", fields: [leagueId], references: [leagueId], onDelete: Cascade)
  user          User     @relation("LeagueMember", fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([leagueId, userId])
  @@index([userId, status])
  @@map("league_memberships")
}

model Prediction {
  predictionId        Int     @id @default(autoincrement()) @map("prediction_id")
  userId              Int     @map("user_id")
  fixtureId           Int     @map("fixture_id")
  roundId             Int     @map("round_id")
  predictedHomeGoals  Int     @map("predicted_home_goals")
  predictedAwayGoals  Int     @map("predicted_away_goals")
  pointsAwarded       Int?    @map("points_awarded")
  isJoker             Boolean @default(false) @map("is_joker")
  submittedAt         DateTime @default(now()) @map("submitted_at") // Using submittedAt as the creation timestamp
  // No separate updatedAt needed for predictions based on current logic
  user                User    @relation(fields: [userId], references: [userId])
  fixture             Fixture @relation(fields: [fixtureId], references: [fixtureId])
  round               Round   @relation(fields: [roundId], references: [roundId])

  // Unique constraint added previously
  @@unique([userId, fixtureId], map: "predictions_user_id_fixture_id_key")
  @@map("predictions")
}

// --- ADD THIS MODEL ---
model NewsItem {
  newsItemId  Int      @id @default(autoincrement()) @map("news_item_id")
  content     String   @db.Text // Use Text for potentially longer content
  createdAt   DateTime @default(now()) @map("created_at")
  postedByUserId Int?     @map("posted_by_user_id") // Foreign key field
  postedBy       User?     @relation("PostedNews", fields: [postedByUserId], references: [userId])
  
  // Optional: Link to admin who posted it (uncomment if needed)
  
  @@map("news_items")
}

model Friendship {
  id          Int      @id @default(autoincrement())
  requesterId Int      @map("requester_id") // User who sent the request
  addresseeId Int      @map("addressee_id") // User who received the request
  status      String   // 'PENDING', 'ACCEPTED' (Start simple, maybe add 'DECLINED', 'BLOCKED' later)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at") // Use @updatedAt for auto-update

  requester   User     @relation("SentFriendships", fields: [requesterId], references: [userId], onDelete: Cascade)
  addressee   User     @relation("ReceivedFriendships", fields: [addresseeId], references: [userId], onDelete: Cascade)

  // Ensures a user pair can only have one friendship record between them, regardless of direction
  // This requires checking both combinations when creating. A simpler alternative is just unique on requester/addressee
  @@unique([requesterId, addresseeId], map: "friendship_requester_addressee_key")
  // Index for finding requests received by a user
  @@index([addresseeId, status])
  @@map("friendships")
}
// --- END ADDED MODEL ---